import os, re
from datetime import date
from aiogram import Bot, Dispatcher, types
from aiogram.filters import CommandStart, Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder
from dotenv import load_dotenv
from sqlalchemy import select
from sqlalchemy.orm import selectinload
from db import async_session
from models import User, Holiday

load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")

bot = Bot(BOT_TOKEN)
dp = Dispatcher()

# –õ–æ–∫–∞–ª–∏–∑–∞—Ü–∏—è (–¥–æ–±–∞–≤–ª–µ–Ω—ã –∫–Ω–æ–ø–∫–∏ –∏ —Ç–µ–∫—Å—Ç—ã –¥–ª—è –º–µ–Ω—é)
MESSAGES = {
    "start": {
        "ru": "–ü—Ä–∏–≤–µ—Ç! ‚úÖ –¢—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.",
        "kk": "–°”ô–ª–µ–º! ‚úÖ –°–µ–Ω —Ç—ñ—Ä–∫–µ–ª–¥—ñ“£.",
        "en": "Hello! ‚úÖ You are registered."
    },
    "help": {
        "ru": "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥—ã:\n/next_holidays ‚Äî 3 –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞\n/holidays ‚Äî –±–ª–∏–∂–∞–π—à–∏–π –ø—Ä–∞–∑–¥–Ω–∏–∫\n/set_birthday DD-MM[(-YYYY)]\n/my_birthday\n/clear_birthday\n/set_lang ru|kk|en",
        "kk": "‚ÑπÔ∏è –ö–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n/next_holidays ‚Äî 3 –∂–∞“õ—ã–Ω –º–µ—Ä–µ–∫–µ\n/holidays ‚Äî –∂–∞“õ—ã–Ω –º–µ—Ä–µ–∫–µ\n/set_birthday DD-MM[(-YYYY)]\n/my_birthday\n/clear_birthday\n/set_lang ru|kk|en",
        "en": "‚ÑπÔ∏è Commands:\n/next_holidays ‚Äî 3 upcoming holidays\n/holidays ‚Äî next holiday\n/set_birthday DD-MM[(-YYYY)]\n/my_birthday\n/clear_birthday\n/set_lang ru|kk|en"
    },
    "lang_saved": {
        "ru": "‚úÖ –Ø–∑—ã–∫ —Å–æ—Ö—Ä–∞–Ω—ë–Ω: {lang}",
        "kk": "‚úÖ –¢—ñ–ª —Å–∞“õ—Ç–∞–ª–¥—ã: {lang}",
        "en": "‚úÖ Language saved: {lang}"
    },

    # –î–†
    "birthday_saved": {
        "ru": "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: {date}",
        "kk": "üéÇ –¢—É“ì–∞–Ω –∫“Ø–Ω —Å–∞“õ—Ç–∞–ª–¥—ã: {date}",
        "en": "üéÇ Birthday saved: {date}"
    },
    "birthday_show": {
        "ru": "üìÖ –¢–≤–æ—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {date}",
        "kk": "üìÖ –°–µ–Ω—ñ“£ —Ç—É“ì–∞–Ω –∫“Ø–Ω—ñ“£: {date}",
        "en": "üìÖ Your birthday: {date}"
    },
    "birthday_cleared": {
        "ru": "‚ùå –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω–∞",
        "kk": "‚ùå –¢—É“ì–∞–Ω –∫“Ø–Ω ”©—à—ñ—Ä—ñ–ª–¥—ñ",
        "en": "‚ùå Birthday cleared"
    },
    "birthday_not_set": {
        "ru": "‚ö†Ô∏è –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞",
        "kk": "‚ö†Ô∏è –¢—É“ì–∞–Ω –∫“Ø–Ω –æ—Ä–Ω–∞—Ç—ã–ª–º–∞“ì–∞–Ω",
        "en": "‚ö†Ô∏è Birthday not set"
    },

    #next holidays
    "holiday_today": {"ru": "üéâ –°–µ–≥–æ–¥–Ω—è –ø—Ä–∞–∑–¥–Ω–∏–∫: {name}!",
                      "kk": "üéâ –ë“Ø–≥—ñ–Ω –º–µ—Ä–µ–∫–µ: {name}!",
                      "en": "üéâ Today is holiday: {name}!"},
    "holiday_tomorrow": {"ru": "üéä –ó–∞–≤—Ç—Ä–∞ –ø—Ä–∞–∑–¥–Ω–∏–∫: {name}!",
                         "kk": "üéä –ï—Ä—Ç–µ“£ –º–µ—Ä–µ–∫–µ: {name}!",
                         "en": "üéä Tomorrow is holiday: {name}!"},
    "holiday_future": {"ru": "‚è≥ –î–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞ ¬´{name}¬ª –æ—Å—Ç–∞–ª–æ—Å—å {delta} {days_word}\nüìÖ {date}",
                       "kk": "‚è≥ ¬´{name}¬ª –º–µ—Ä–µ–∫–µ—Å—ñ–Ω–µ –¥–µ–π—ñ–Ω {delta} {days_word} “õ–∞–ª–¥—ã\nüìÖ {date}",
                       "en": "‚è≥ {delta} {days_word} left until ¬´{name}¬ª\nüìÖ {date}"},
    "next_holidays_header": {"ru": "üìÖ –ë–ª–∏–∂–∞–π—à–∏–µ –ø—Ä–∞–∑–¥–Ω–∏–∫–∏:",
                             "kk": "üìÖ –ñ–∞“õ—ã–Ω –º–µ—Ä–µ–∫–µ–ª–µ—Ä:",
                             "en": "üìÖ Upcoming holidays:"},
    "no_holidays": {"ru": "‚ö†Ô∏è –ù–µ—Ç –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–æ–≤",
                    "kk": "‚ö†Ô∏è –ñ–∞“õ—ã–Ω –º–µ—Ä–µ–∫–µ–ª–µ—Ä –∂–æ“õ",
                    "en": "‚ö†Ô∏è No upcoming holidays"},

    # –ö–Ω–æ–ø–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
    "btn_holidays": {"ru": "üìÖ –ü—Ä–∞–∑–¥–Ω–∏–∫–∏", "kk": "üìÖ –ú–µ—Ä–µ–∫–µ–ª–µ—Ä", "en": "üìÖ Holidays"},
    "btn_next3": {"ru": "üóìÔ∏è 3 –±–ª–∏–∂–∞–π—à–∏—Ö", "kk": "üóìÔ∏è 3 –∂–∞“õ—ã–Ω", "en": "üóìÔ∏è Next 3"},
    "btn_lang": {"ru": "üåê –Ø–∑—ã–∫", "kk": "üåê –¢—ñ–ª", "en": "üåê Language"},
    "btn_birthday": {"ru": "üéÇ –ú–æ–π –î–†", "kk": "üéÇ –¢—É“ì–∞–Ω –∫“Ø–Ω—ñ–º", "en": "üéÇ My bday"},

    # –ú–µ–Ω—é –ø–æ –î–† (inline)
    "bday_menu_title": {"ru": "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –î–†:", "kk": "–¢—É“ì–∞–Ω –∫“Ø–Ω –±–∞—Å“õ–∞—Ä—É:", "en": "Birthday menu:"},
    "btn_bday_set": {"ru": "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†", "kk": "–¢—É“ì–∞–Ω –∫“Ø–Ω “õ–æ—é", "en": "Set birthday"},
    "btn_bday_view": {"ru": "–ü–æ–∫–∞–∑–∞—Ç—å –î–†", "kk": "–¢—É“ì–∞–Ω –∫“Ø–Ω –∫”©—Ä—Å–µ—Ç—É", "en": "View birthday"},
    "btn_bday_clear": {"ru": "–£–¥–∞–ª–∏—Ç—å –î–†", "kk": "–ñ–æ—é", "en": "Clear birthday"},
    "bday_set_instructions": {
        "ru": "–ß—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –î–†, –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É: DD-MM –∏–ª–∏ DD-MM-YYYY(–≥–æ–¥ –º–æ–∂–Ω–æ –Ω–µ —É–∫–∞–∑—ã–≤–∞—Ç—å).",
        "kk": "–¢—É“ì–∞–Ω –∫“Ø–Ω–¥—ñ –æ—Ä–Ω–∞—Ç—É “Ø—à—ñ–Ω: DD-MM –Ω–µ–º–µ—Å–µ DD-MM-YYYY (–∂—ã–ª–¥—ã –∫”©—Ä—Å–µ—Ç–ø–µ—É–≥–µ –±–æ–ª–∞–¥—ã).",
        "en": "To set birthday: DD-MM or DD-MM-YYYY (year optional)."
    },

    # language chooser prompt
    "choose_language_prompt": {
        "ru": "–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", "kk": "–¢—ñ–ª–¥—ñ —Ç–∞“£–¥–∞“£—ã–∑:", "en": "Choose language:"},
    "birthday_notifications": {
        "ru": "üéâ –°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –¥–µ–Ω—å —Ä–æ–∂–¥–µ–Ω–∏—è! –° –¥–Ω—ë–º —Ä–æ–∂–¥–µ–Ω–∏—è, {user.name}! ü•≥\n",
        "kk": "üéâ –ë“Ø–≥—ñ–Ω —Å–µ–Ω—ñ“£ —Ç—É“ì–∞–Ω –∫“Ø–Ω—ñ“£! “ö“±—Ç—Ç—ã –±–æ–ª—Å—ã–Ω, {user.name}! ü•≥\n",
        "en": "üéâ Today is your birthday! Happy birthday, {user.name}! ü•≥"
    },
}


def t(key, locale="ru", **kwargs):
    translations = MESSAGES.get(key, {})
    text = translations.get(locale) or translations.get("ru") or next(iter(translations.values()), "")
    try:
        return text.format(**kwargs)
    except Exception:
        return text


def _parse_birthday_arg(arg: str) -> date:
    cleaned = re.sub(r"[\/\.\-]", ".", arg.strip())
    parts = [p for p in cleaned.split(".") if p]
    if len(parts) == 2:
        d, m = parts
        y = 2000
    elif len(parts) == 3:
        d, m, y = parts
        y = int(y)
        if y < 100:
            y += 2000
    else:
        raise ValueError("–§–æ—Ä–º–∞—Ç: DD-MM –∏–ª–∏ DD-MM-YYYY")
    return date(year=int(y), month=int(m), day=int(d))


async def _get_or_create_user(tg_id: int, full_name: str) -> User:
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == tg_id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=tg_id, name=full_name)
            session.add(user)
            await session.commit()
        return user


async def _get_holiday_translations():
    async with async_session() as session:
        res = await session.execute(
            select(Holiday).options(selectinload(Holiday.translations)).order_by(Holiday.month, Holiday.day)
        )
        return res.scalars().all()


def _format_holiday_name(holiday, lang: str) -> str:
    # 1. –ò—â–µ–º –ø–µ—Ä–µ–≤–æ–¥ –Ω–∞ —è–∑—ã–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for tr in holiday.translations:
        if tr.lang == lang:
            return tr.name
    # 2. fallback –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (ru ‚Üí kk ‚Üí en)
    fallback_priority = ["kk", "ru", "en"]
    for fb in fallback_priority:
        for tr in holiday.translations:
            if tr.lang == fb:
                return tr.name

    # 3. –µ—Å–ª–∏ –≤–æ–æ–±—â–µ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç ‚Äî –Ω–∞–∑–≤–∞–Ω–∏–µ "Holiday"
    return "Holiday"



def build_main_kb(locale: str):
    kb = ReplyKeyboardBuilder()
    kb.button(text=t("btn_holidays", locale))
    kb.button(text=t("btn_next3", locale))
    kb.button(text=t("btn_lang", locale))
    kb.button(text=t("btn_birthday", locale))
    kb.adjust(2)
    return kb.as_markup(resize_keyboard=True)


@dp.message(CommandStart())
async def start(message: types.Message):
    user = await _get_or_create_user(message.from_user.id, message.from_user.full_name)
    await message.answer(t("start", user.lang), reply_markup=build_main_kb(user.lang))


@dp.message(Command("help"))
async def help_cmd(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
        lang = user.lang if user else "ru"
    await message.answer(t("help", lang))


# –ö–æ–º–∞–Ω–¥–∞ –±–ª–∏–∂–∞–π—à–µ–≥–æ –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
@dp.message(Command("holidays"))
async def holidays_cmd(message: types.Message):
    # reuse logic (works both for command and button via default_handler)
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one()
    holidays = await _get_holiday_translations()
    if not holidays:
        await message.answer(t("no_holidays", user.lang))
        return

    today = date.today()
    next_item = None
    for h in holidays:
        # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞—Ç—ã
        if not (1 <= h.month <= 12 and 1 <= h.day <= 31):
            continue
        try:
            h_date = date(today.year, h.month, h.day)
        except ValueError:
            continue
        if h_date >= today:
            next_item = (h, h_date)
            break

    if not next_item:
        h = holidays[0]
        h_date = date(today.year + 1, h.month, h.day)
        next_item = (h, h_date)

    h, h_date = next_item
    delta = (h_date - today).days
    name = _format_holiday_name(h, user.lang)

    if delta == 0:
        text = t("holiday_today", user.lang, name=name)
    elif delta == 1:
        text = t("holiday_tomorrow", user.lang, name=name)
    else:
        # –ø–æ–¥—Å—Ç–∞–≤–ª—è–µ–º —Å–ª–æ–≤–æ –¥–ª—è –¥–Ω–µ–π
        if user.lang == "kk":
            day_word = "–∫“Ø–Ω"
        elif user.lang == "en":
            day_word = "day" if delta == 1 else "days"
        else:
            day_word = "–¥–µ–Ω—å" if delta == 1 else "–¥–Ω–µ–π"

        text = t("holiday_future", user.lang,
                 name=name,
                 delta=delta,
                 days_word=day_word,
                 date=h_date.strftime("%d-%m-%Y"))

    await message.answer(text)


# Callback –¥–ª—è –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞
@dp.callback_query(lambda c: c.data and c.data.startswith("lang:"))
async def lang_callback(cb: types.CallbackQuery):
    lang = cb.data.split(":", 1)[1]
    user_id = cb.from_user.id
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == user_id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=user_id, name=cb.from_user.full_name)
            session.add(user)
            await session.commit()
        user.lang = lang
        await session.commit()

    await cb.answer()  # —É–±—Ä–∞—Ç—å "loading"
    # —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ inline-—Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã—Å—ã–ª–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ + –Ω–æ–≤–æ–µ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —è–∑—ã–∫–µ
    try:
        await cb.message.delete()
    except Exception:
        pass

    await bot.send_message(user_id, t("lang_saved", locale=lang, lang=lang), reply_markup=build_main_kb(lang))


# Callback –¥–ª—è –º–µ–Ω—é –î–†
@dp.callback_query(lambda c: c.data and c.data.startswith("bday:"))
async def bday_callback(cb: types.CallbackQuery):
    action = cb.data.split(":", 1)[1]
    user_id = cb.from_user.id
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == user_id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=user_id, name=cb.from_user.full_name)
            session.add(user)
            await session.commit()
        lang = user.lang if user else "ru"

    if action == "view":
        if user.birthday:
            await cb.message.edit_text(t("birthday_show", lang, date=user.birthday.strftime("%d-%m")))
        else:
            await cb.message.edit_text(t("birthday_not_set", lang))
    elif action == "set":
        await cb.message.edit_text(t("bday_set_instructions", lang))
    elif action == "clear":
        if user.birthday:
            async with async_session() as session:
                res = await session.execute(select(User).where(User.tg_id == user_id))
                u = res.scalar_one()
                u.birthday = None
                await session.commit()
            await cb.message.edit_text(t("birthday_cleared", lang))
        else:
            await cb.message.edit_text(t("birthday_not_set", lang))
    await cb.answer()

# 3 –±–ª–∏–∂–∞–π—à–∏—Ö –ø—Ä–∞–∑–¥–Ω–∏–∫–∞
@dp.message(Command("next_holidays"))
async def next_holidays(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one()
    holidays = await _get_holiday_translations()
    if not holidays:
        await message.answer(t("no_holidays", user.lang))
        return

    today = date.today()
    upcoming = []
    for h in holidays:
        # –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –¥–∞—Ç—ã
        if not (1 <= h.month <= 12 and 1 <= h.day <= 31):
            continue
        try:
            h_date = date(today.year, h.month, h.day)
        except ValueError:
            continue
        if h_date < today:
            h_date = date(today.year + 1, h.month, h.day)
        upcoming.append((h, h_date))

    # —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ
    upcoming.sort(key=lambda x: x[1])
    top3 = upcoming[:3]

    lines = [t("next_holidays_header", user.lang)]
    for h, h_date in top3:
        delta = (h_date - today).days
        name = _format_holiday_name(h, user.lang)

        if delta == 0:
            lines.append(f"üéâ {t('holiday_today', user.lang, name=name)}")
        elif delta == 1:
            lines.append(f"üéä {t('holiday_tomorrow', user.lang, name=name)}")
        else:
            if user.lang == "kk":
                day_word = "–∫“Ø–Ω"
            elif user.lang == "en":
                day_word = "day" if delta == 1 else "days"
            else:
                day_word = "–¥–µ–Ω—å" if delta == 1 else "–¥–Ω–µ–π"

            lines.append(
                t("holiday_future", user.lang,
                  name=name,
                  delta=delta,
                  days_word=day_word,
                  date=h_date.strftime("%d-%m-%Y"))
            )

    await message.answer("\n\n".join(lines))

# –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –î–† (–∫–∞–∫ —Ä–∞–Ω—å—à–µ)
@dp.message(Command("set_birthday"))
async def set_birthday_cmd(message: types.Message):
    parts = message.text.split(maxsplit=1)
    if len(parts) < 2:
        await message.answer("‚ùå –£–∫–∞–∂–∏ –¥–∞—Ç—É: DD-MM –∏–ª–∏ DD-MM-YYYY (—Ç–æ—á–∫–∞ –∏ / —Ç–æ–∂–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è)")
        return

    try:
        birthday = _parse_birthday_arg(parts[1])
    except Exception:
        await message.answer("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ü—Ä–∏–º–µ—Ä: 28-08 –∏–ª–∏ 28.08.2000")
        return

    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()

        if not user:
            user = User(tg_id=message.from_user.id, name=message.from_user.full_name)
            session.add(user)
            await session.commit()

        user.birthday = birthday
        await session.commit()

    await message.answer(t("birthday_saved", user.lang, date=birthday.strftime("%d-%m-%Y")))


@dp.message(Command("my_birthday"))
async def my_birthday_cmd(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=message.from_user.id, name=message.from_user.full_name)
            session.add(user)
            await session.commit()
        if user.birthday:
            await message.answer(t("birthday_show", user.lang, date=user.birthday.strftime("%d-%m-%Y")))
        else:
            await message.answer(t("birthday_not_set", user.lang))


@dp.message(Command("clear_birthday"))
async def clear_birthday_cmd(message: types.Message):
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=message.from_user.id, name=message.from_user.full_name)
            session.add(user)
            await session.commit()
        if user.birthday:
            user.birthday = None
            await session.commit()
            await message.answer(t("birthday_cleared", user.lang))
        else:
            await message.answer(t("birthday_not_set", user.lang))

@dp.message(lambda m: re.match(r"^\s*\d{1,2}[./-]\d{1,2}([./-]\d{2,4})?\s*$", m.text or ""))
async def catch_birthday(message: types.Message):
    """
    –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —É–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –ø—Ä–æ—Å—Ç—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    """
    raw = (message.text or "").strip()
    cleaned = re.sub(r"[\/\.\-]", ".", raw)
    parts = [p for p in cleaned.split(".") if p]
    try:
        if len(parts) == 2:
            d, m = parts
            y = 2000
        elif len(parts) == 3:
            d, m, y = parts
            y = int(y)
            if y < 100:
                y += 2000
        else:
            raise ValueError()
        birthday = date(year=int(y), month=int(m), day=int(d))
    except Exception:
        await message.answer("‚ö†Ô∏è –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã: 28-08 –∏–ª–∏ 28-08-2000")
        return

    # –∏—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
        if not user:
            user = User(tg_id=message.from_user.id, name=message.from_user.full_name)
            session.add(user)
            await session.commit()

        user.birthday = birthday
        await session.commit()

    lang = user.lang if user else "ru"
    await message.answer(
        t("birthday_saved", lang, date=birthday.strftime("%d-%m-%Y"))
    )

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ —è–∑—ã–∫–∞ (inline)
@dp.message()
async def default_handler(message: types.Message):
    text = (message.text or "").strip()

    # –ø–æ–ª—É—á–∞–µ–º user.lang (–µ—Å–ª–∏ –µ—Å—Ç—å)
    async with async_session() as session:
        res = await session.execute(select(User).where(User.tg_id == message.from_user.id))
        user = res.scalar_one_or_none()
    user_lang = user.lang if user else "ru"

    # –°–æ–ø–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö –∫–Ω–æ–ø–æ–∫ —Å –¥–µ–π—Å—Ç–≤–∏—è–º–∏
    btn_map = {
        t("btn_holidays", "ru"): holidays_cmd,
        t("btn_holidays", "kk"): holidays_cmd,
        t("btn_holidays", "en"): holidays_cmd,

        t("btn_next3", "ru"): next_holidays,
        t("btn_next3", "kk"): next_holidays,
        t("btn_next3", "en"): next_holidays,

        t("btn_lang", "ru"): "lang_menu",
        t("btn_lang", "kk"): "lang_menu",
        t("btn_lang", "en"): "lang_menu",

        t("btn_birthday", "ru"): "bday_menu",
        t("btn_birthday", "kk"): "bday_menu",
        t("btn_birthday", "en"): "bday_menu",
    }

    # –µ—Å–ª–∏ –Ω–∞–∂–∞—Ç–∞ –æ–¥–Ω–∞ –∏–∑ –∫–Ω–æ–ø–æ–∫ ‚Äî –≤—ã–∑–æ–≤–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
    if text in btn_map:
        action = btn_map[text]
        if callable(action):
            await action(message)
            return
        if action == "lang_menu":
            # show inline language chooser
            kb = InlineKeyboardBuilder()
            kb.button(text="–†—É—Å—Å–∫–∏–π üá∑üá∫", callback_data="lang:ru")
            kb.button(text="“ö–∞–∑–∞“õ—à–∞ üá∞üáø", callback_data="lang:kk")
            kb.button(text="English üá¨üáß", callback_data="lang:en")
            kb.adjust(1)
            await message.answer(t("choose_language_prompt", user_lang) + "\n", reply_markup=kb.as_markup())
            return
        if action == "bday_menu":
            # show birthday inline menu
            kb = InlineKeyboardBuilder()
            kb.button(text=t("btn_bday_view", user_lang), callback_data="bday:view")
            kb.button(text=t("btn_bday_set", user_lang), callback_data="bday:set")
            kb.button(text=t("btn_bday_clear", user_lang), callback_data="bday:clear")
            kb.adjust(1)
            await message.answer(t("bday_menu_title", user_lang), reply_markup=kb.as_markup())
            return

    # –µ—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å help (–ª–æ–∫–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã–π)
    await message.answer(t("help", user_lang))
